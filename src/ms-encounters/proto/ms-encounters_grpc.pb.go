// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ms-encounters.proto

package ms_encounters

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Encounters_GetAll_FullMethodName = "/ms_encounters.Encounters/GetAll"
)

// EncountersClient is the client API for Encounters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncountersClient interface {
	GetAll(ctx context.Context, in *NoParamsRequest, opts ...grpc.CallOption) (*EncountersResponse, error)
}

type encountersClient struct {
	cc grpc.ClientConnInterface
}

func NewEncountersClient(cc grpc.ClientConnInterface) EncountersClient {
	return &encountersClient{cc}
}

func (c *encountersClient) GetAll(ctx context.Context, in *NoParamsRequest, opts ...grpc.CallOption) (*EncountersResponse, error) {
	out := new(EncountersResponse)
	err := c.cc.Invoke(ctx, Encounters_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncountersServer is the server API for Encounters service.
// All implementations should embed UnimplementedEncountersServer
// for forward compatibility
type EncountersServer interface {
	GetAll(context.Context, *NoParamsRequest) (*EncountersResponse, error)
}

// UnimplementedEncountersServer should be embedded to have forward compatible implementations.
type UnimplementedEncountersServer struct {
}

func (UnimplementedEncountersServer) GetAll(context.Context, *NoParamsRequest) (*EncountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}

// UnsafeEncountersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncountersServer will
// result in compilation errors.
type UnsafeEncountersServer interface {
	mustEmbedUnimplementedEncountersServer()
}

func RegisterEncountersServer(s grpc.ServiceRegistrar, srv EncountersServer) {
	s.RegisterService(&Encounters_ServiceDesc, srv)
}

func _Encounters_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encounters_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServer).GetAll(ctx, req.(*NoParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Encounters_ServiceDesc is the grpc.ServiceDesc for Encounters service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Encounters_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ms_encounters.Encounters",
	HandlerType: (*EncountersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _Encounters_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ms-encounters.proto",
}
