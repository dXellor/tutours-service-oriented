// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: proto/ms-encounters/ms-encounters.proto

package ms_encounters

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EncounterStatus int32

const (
	EncounterStatus_ACTIVE   EncounterStatus = 0
	EncounterStatus_DRAFT    EncounterStatus = 1
	EncounterStatus_ARCHIVED EncounterStatus = 2
)

// Enum value maps for EncounterStatus.
var (
	EncounterStatus_name = map[int32]string{
		0: "ACTIVE",
		1: "DRAFT",
		2: "ARCHIVED",
	}
	EncounterStatus_value = map[string]int32{
		"ACTIVE":   0,
		"DRAFT":    1,
		"ARCHIVED": 2,
	}
)

func (x EncounterStatus) Enum() *EncounterStatus {
	p := new(EncounterStatus)
	*p = x
	return p
}

func (x EncounterStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncounterStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ms_encounters_ms_encounters_proto_enumTypes[0].Descriptor()
}

func (EncounterStatus) Type() protoreflect.EnumType {
	return &file_proto_ms_encounters_ms_encounters_proto_enumTypes[0]
}

func (x EncounterStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncounterStatus.Descriptor instead.
func (EncounterStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{0}
}

type Encounter_EncounterType int32

const (
	Encounter_SOCIAL   Encounter_EncounterType = 0
	Encounter_LOCATION Encounter_EncounterType = 1
	Encounter_MISC     Encounter_EncounterType = 2
)

// Enum value maps for Encounter_EncounterType.
var (
	Encounter_EncounterType_name = map[int32]string{
		0: "SOCIAL",
		1: "LOCATION",
		2: "MISC",
	}
	Encounter_EncounterType_value = map[string]int32{
		"SOCIAL":   0,
		"LOCATION": 1,
		"MISC":     2,
	}
)

func (x Encounter_EncounterType) Enum() *Encounter_EncounterType {
	p := new(Encounter_EncounterType)
	*p = x
	return p
}

func (x Encounter_EncounterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Encounter_EncounterType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ms_encounters_ms_encounters_proto_enumTypes[1].Descriptor()
}

func (Encounter_EncounterType) Type() protoreflect.EnumType {
	return &file_proto_ms_encounters_ms_encounters_proto_enumTypes[1]
}

func (x Encounter_EncounterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Encounter_EncounterType.Descriptor instead.
func (Encounter_EncounterType) EnumDescriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{0, 0}
}

type Encounter_EncounterApprovalStatus int32

const (
	Encounter_PENDING         Encounter_EncounterApprovalStatus = 0
	Encounter_SYSTEM_APPROVED Encounter_EncounterApprovalStatus = 1
	Encounter_ADMIN_APPROVED  Encounter_EncounterApprovalStatus = 2
	Encounter_DECLINED        Encounter_EncounterApprovalStatus = 3
)

// Enum value maps for Encounter_EncounterApprovalStatus.
var (
	Encounter_EncounterApprovalStatus_name = map[int32]string{
		0: "PENDING",
		1: "SYSTEM_APPROVED",
		2: "ADMIN_APPROVED",
		3: "DECLINED",
	}
	Encounter_EncounterApprovalStatus_value = map[string]int32{
		"PENDING":         0,
		"SYSTEM_APPROVED": 1,
		"ADMIN_APPROVED":  2,
		"DECLINED":        3,
	}
)

func (x Encounter_EncounterApprovalStatus) Enum() *Encounter_EncounterApprovalStatus {
	p := new(Encounter_EncounterApprovalStatus)
	*p = x
	return p
}

func (x Encounter_EncounterApprovalStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Encounter_EncounterApprovalStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ms_encounters_ms_encounters_proto_enumTypes[2].Descriptor()
}

func (Encounter_EncounterApprovalStatus) Type() protoreflect.EnumType {
	return &file_proto_ms_encounters_ms_encounters_proto_enumTypes[2]
}

func (x Encounter_EncounterApprovalStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Encounter_EncounterApprovalStatus.Descriptor instead.
func (Encounter_EncounterApprovalStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{0, 1}
}

type EncounterCompletion_EncounterCompletionStatus int32

const (
	EncounterCompletion_STARTED     EncounterCompletion_EncounterCompletionStatus = 0
	EncounterCompletion_FAILED      EncounterCompletion_EncounterCompletionStatus = 1
	EncounterCompletion_COMPLETED   EncounterCompletion_EncounterCompletionStatus = 2
	EncounterCompletion_PROGRESSING EncounterCompletion_EncounterCompletionStatus = 3
)

// Enum value maps for EncounterCompletion_EncounterCompletionStatus.
var (
	EncounterCompletion_EncounterCompletionStatus_name = map[int32]string{
		0: "STARTED",
		1: "FAILED",
		2: "COMPLETED",
		3: "PROGRESSING",
	}
	EncounterCompletion_EncounterCompletionStatus_value = map[string]int32{
		"STARTED":     0,
		"FAILED":      1,
		"COMPLETED":   2,
		"PROGRESSING": 3,
	}
)

func (x EncounterCompletion_EncounterCompletionStatus) Enum() *EncounterCompletion_EncounterCompletionStatus {
	p := new(EncounterCompletion_EncounterCompletionStatus)
	*p = x
	return p
}

func (x EncounterCompletion_EncounterCompletionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncounterCompletion_EncounterCompletionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_ms_encounters_ms_encounters_proto_enumTypes[3].Descriptor()
}

func (EncounterCompletion_EncounterCompletionStatus) Type() protoreflect.EnumType {
	return &file_proto_ms_encounters_ms_encounters_proto_enumTypes[3]
}

func (x EncounterCompletion_EncounterCompletionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncounterCompletion_EncounterCompletionStatus.Descriptor instead.
func (EncounterCompletion_EncounterCompletionStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{1, 0}
}

type Encounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32                             `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId         int32                             `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Name           string                            `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Description    string                            `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	Latitude       float32                           `protobuf:"fixed32,5,opt,name=Latitude,proto3" json:"Latitude,omitempty"`
	Longitude      float32                           `protobuf:"fixed32,6,opt,name=Longitude,proto3" json:"Longitude,omitempty"`
	Xp             int32                             `protobuf:"varint,7,opt,name=Xp,proto3" json:"Xp,omitempty"`
	Status         EncounterStatus                   `protobuf:"varint,8,opt,name=Status,proto3,enum=ms_encounters.EncounterStatus" json:"Status,omitempty"`
	Type           Encounter_EncounterType           `protobuf:"varint,9,opt,name=Type,proto3,enum=ms_encounters.Encounter_EncounterType" json:"Type,omitempty"`
	Range          float32                           `protobuf:"fixed32,10,opt,name=Range,proto3" json:"Range,omitempty"`
	Image          string                            `protobuf:"bytes,11,opt,name=Image,proto3" json:"Image,omitempty"`
	PeopleCount    int32                             `protobuf:"varint,12,opt,name=PeopleCount,proto3" json:"PeopleCount,omitempty"`
	ApprovalStatus Encounter_EncounterApprovalStatus `protobuf:"varint,13,opt,name=approvalStatus,proto3,enum=ms_encounters.Encounter_EncounterApprovalStatus" json:"approvalStatus,omitempty"`
	ImageLatitude  float32                           `protobuf:"fixed32,14,opt,name=ImageLatitude,proto3" json:"ImageLatitude,omitempty"`
	ImageLongitude float32                           `protobuf:"fixed32,15,opt,name=ImageLongitude,proto3" json:"ImageLongitude,omitempty"`
}

func (x *Encounter) Reset() {
	*x = Encounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encounter) ProtoMessage() {}

func (x *Encounter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encounter.ProtoReflect.Descriptor instead.
func (*Encounter) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{0}
}

func (x *Encounter) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Encounter) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Encounter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Encounter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Encounter) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Encounter) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Encounter) GetXp() int32 {
	if x != nil {
		return x.Xp
	}
	return 0
}

func (x *Encounter) GetStatus() EncounterStatus {
	if x != nil {
		return x.Status
	}
	return EncounterStatus_ACTIVE
}

func (x *Encounter) GetType() Encounter_EncounterType {
	if x != nil {
		return x.Type
	}
	return Encounter_SOCIAL
}

func (x *Encounter) GetRange() float32 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *Encounter) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Encounter) GetPeopleCount() int32 {
	if x != nil {
		return x.PeopleCount
	}
	return 0
}

func (x *Encounter) GetApprovalStatus() Encounter_EncounterApprovalStatus {
	if x != nil {
		return x.ApprovalStatus
	}
	return Encounter_PENDING
}

func (x *Encounter) GetImageLatitude() float32 {
	if x != nil {
		return x.ImageLatitude
	}
	return 0
}

func (x *Encounter) GetImageLongitude() float32 {
	if x != nil {
		return x.ImageLongitude
	}
	return 0
}

type EncounterCompletion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32                                         `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserId        int32                                         `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	EncounterId   int32                                         `protobuf:"varint,3,opt,name=EncounterId,proto3" json:"EncounterId,omitempty"`
	LastUpdatedAt *timestamppb.Timestamp                        `protobuf:"bytes,4,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	Xp            int32                                         `protobuf:"varint,5,opt,name=Xp,proto3" json:"Xp,omitempty"`
	Status        EncounterCompletion_EncounterCompletionStatus `protobuf:"varint,6,opt,name=Status,proto3,enum=ms_encounters.EncounterCompletion_EncounterCompletionStatus" json:"Status,omitempty"`
	Encounter     *Encounter                                    `protobuf:"bytes,7,opt,name=Encounter,proto3" json:"Encounter,omitempty"`
}

func (x *EncounterCompletion) Reset() {
	*x = EncounterCompletion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterCompletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterCompletion) ProtoMessage() {}

func (x *EncounterCompletion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterCompletion.ProtoReflect.Descriptor instead.
func (*EncounterCompletion) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{1}
}

func (x *EncounterCompletion) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EncounterCompletion) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *EncounterCompletion) GetEncounterId() int32 {
	if x != nil {
		return x.EncounterId
	}
	return 0
}

func (x *EncounterCompletion) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *EncounterCompletion) GetXp() int32 {
	if x != nil {
		return x.Xp
	}
	return 0
}

func (x *EncounterCompletion) GetStatus() EncounterCompletion_EncounterCompletionStatus {
	if x != nil {
		return x.Status
	}
	return EncounterCompletion_STARTED
}

func (x *EncounterCompletion) GetEncounter() *Encounter {
	if x != nil {
		return x.Encounter
	}
	return nil
}

type EncounterStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompletedCount int32 `protobuf:"varint,1,opt,name=CompletedCount,proto3" json:"CompletedCount,omitempty"`
	FailedCount    int32 `protobuf:"varint,2,opt,name=FailedCount,proto3" json:"FailedCount,omitempty"`
}

func (x *EncounterStats) Reset() {
	*x = EncounterStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterStats) ProtoMessage() {}

func (x *EncounterStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterStats.ProtoReflect.Descriptor instead.
func (*EncounterStats) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{2}
}

func (x *EncounterStats) GetCompletedCount() int32 {
	if x != nil {
		return x.CompletedCount
	}
	return 0
}

func (x *EncounterStats) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

type EncounterYearStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year                   int32   `protobuf:"varint,1,opt,name=Year,proto3" json:"Year,omitempty"`
	CompletedCountByMonths []int32 `protobuf:"varint,2,rep,packed,name=CompletedCountByMonths,proto3" json:"CompletedCountByMonths,omitempty"` // idk valjda
	FailedCountByMonths    []int32 `protobuf:"varint,3,rep,packed,name=FailedCountByMonths,proto3" json:"FailedCountByMonths,omitempty"`       // idk valjda
}

func (x *EncounterYearStats) Reset() {
	*x = EncounterYearStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterYearStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterYearStats) ProtoMessage() {}

func (x *EncounterYearStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterYearStats.ProtoReflect.Descriptor instead.
func (*EncounterYearStats) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{3}
}

func (x *EncounterYearStats) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *EncounterYearStats) GetCompletedCountByMonths() []int32 {
	if x != nil {
		return x.CompletedCountByMonths
	}
	return nil
}

func (x *EncounterYearStats) GetFailedCountByMonths() []int32 {
	if x != nil {
		return x.FailedCountByMonths
	}
	return nil
}

type NoParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoParamsRequest) Reset() {
	*x = NoParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoParamsRequest) ProtoMessage() {}

func (x *NoParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoParamsRequest.ProtoReflect.Descriptor instead.
func (*NoParamsRequest) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{4}
}

type NoParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoParamsResponse) Reset() {
	*x = NoParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoParamsResponse) ProtoMessage() {}

func (x *NoParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoParamsResponse.ProtoReflect.Descriptor instead.
func (*NoParamsResponse) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{5}
}

type IdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *IdRequest) Reset() {
	*x = IdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdRequest) ProtoMessage() {}

func (x *IdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdRequest.ProtoReflect.Descriptor instead.
func (*IdRequest) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{6}
}

func (x *IdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *UserIdRequest) Reset() {
	*x = UserIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdRequest) ProtoMessage() {}

func (x *UserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdRequest.ProtoReflect.Descriptor instead.
func (*UserIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{7}
}

func (x *UserIdRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UserIdAndYearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Year   int64 `protobuf:"varint,2,opt,name=Year,proto3" json:"Year,omitempty"`
}

func (x *UserIdAndYearRequest) Reset() {
	*x = UserIdAndYearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdAndYearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdAndYearRequest) ProtoMessage() {}

func (x *UserIdAndYearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdAndYearRequest.ProtoReflect.Descriptor instead.
func (*UserIdAndYearRequest) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{8}
}

func (x *UserIdAndYearRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserIdAndYearRequest) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

type EncounterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encounter *Encounter `protobuf:"bytes,2,opt,name=Encounter,proto3" json:"Encounter,omitempty"`
}

func (x *EncounterRequest) Reset() {
	*x = EncounterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterRequest) ProtoMessage() {}

func (x *EncounterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterRequest.ProtoReflect.Descriptor instead.
func (*EncounterRequest) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{9}
}

func (x *EncounterRequest) GetEncounter() *Encounter {
	if x != nil {
		return x.Encounter
	}
	return nil
}

type EncounterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encounter *Encounter `protobuf:"bytes,2,opt,name=Encounter,proto3" json:"Encounter,omitempty"`
}

func (x *EncounterResponse) Reset() {
	*x = EncounterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterResponse) ProtoMessage() {}

func (x *EncounterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterResponse.ProtoReflect.Descriptor instead.
func (*EncounterResponse) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{10}
}

func (x *EncounterResponse) GetEncounter() *Encounter {
	if x != nil {
		return x.Encounter
	}
	return nil
}

type IdAndEncounterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64      `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Encounter *Encounter `protobuf:"bytes,2,opt,name=Encounter,proto3" json:"Encounter,omitempty"`
}

func (x *IdAndEncounterRequest) Reset() {
	*x = IdAndEncounterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdAndEncounterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdAndEncounterRequest) ProtoMessage() {}

func (x *IdAndEncounterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdAndEncounterRequest.ProtoReflect.Descriptor instead.
func (*IdAndEncounterRequest) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{11}
}

func (x *IdAndEncounterRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IdAndEncounterRequest) GetEncounter() *Encounter {
	if x != nil {
		return x.Encounter
	}
	return nil
}

type GetApprovedByStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status EncounterStatus `protobuf:"varint,1,opt,name=Status,proto3,enum=ms_encounters.EncounterStatus" json:"Status,omitempty"`
}

func (x *GetApprovedByStatusRequest) Reset() {
	*x = GetApprovedByStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApprovedByStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApprovedByStatusRequest) ProtoMessage() {}

func (x *GetApprovedByStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApprovedByStatusRequest.ProtoReflect.Descriptor instead.
func (*GetApprovedByStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{12}
}

func (x *GetApprovedByStatusRequest) GetStatus() EncounterStatus {
	if x != nil {
		return x.Status
	}
	return EncounterStatus_ACTIVE
}

type EncountersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encounters []*Encounter `protobuf:"bytes,1,rep,name=Encounters,proto3" json:"Encounters,omitempty"`
}

func (x *EncountersResponse) Reset() {
	*x = EncountersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncountersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncountersResponse) ProtoMessage() {}

func (x *EncountersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncountersResponse.ProtoReflect.Descriptor instead.
func (*EncountersResponse) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{13}
}

func (x *EncountersResponse) GetEncounters() []*Encounter {
	if x != nil {
		return x.Encounters
	}
	return nil
}

type EncounterCompletionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncounterCompletion *EncounterCompletion `protobuf:"bytes,1,opt,name=EncounterCompletion,proto3" json:"EncounterCompletion,omitempty"`
}

func (x *EncounterCompletionResponse) Reset() {
	*x = EncounterCompletionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterCompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterCompletionResponse) ProtoMessage() {}

func (x *EncounterCompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterCompletionResponse.ProtoReflect.Descriptor instead.
func (*EncounterCompletionResponse) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{14}
}

func (x *EncounterCompletionResponse) GetEncounterCompletion() *EncounterCompletion {
	if x != nil {
		return x.EncounterCompletion
	}
	return nil
}

type EncounterCompletionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncounterCompletions []*EncounterCompletion `protobuf:"bytes,1,rep,name=EncounterCompletions,proto3" json:"EncounterCompletions,omitempty"`
}

func (x *EncounterCompletionsResponse) Reset() {
	*x = EncounterCompletionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterCompletionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterCompletionsResponse) ProtoMessage() {}

func (x *EncounterCompletionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterCompletionsResponse.ProtoReflect.Descriptor instead.
func (*EncounterCompletionsResponse) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{15}
}

func (x *EncounterCompletionsResponse) GetEncounterCompletions() []*EncounterCompletion {
	if x != nil {
		return x.EncounterCompletions
	}
	return nil
}

type EncounterStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncounterStats *EncounterStats `protobuf:"bytes,1,opt,name=EncounterStats,proto3" json:"EncounterStats,omitempty"`
}

func (x *EncounterStatsResponse) Reset() {
	*x = EncounterStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterStatsResponse) ProtoMessage() {}

func (x *EncounterStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterStatsResponse.ProtoReflect.Descriptor instead.
func (*EncounterStatsResponse) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{16}
}

func (x *EncounterStatsResponse) GetEncounterStats() *EncounterStats {
	if x != nil {
		return x.EncounterStats
	}
	return nil
}

type EncounterYearStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncounterYearStats *EncounterYearStats `protobuf:"bytes,1,opt,name=EncounterYearStats,proto3" json:"EncounterYearStats,omitempty"`
}

func (x *EncounterYearStatsResponse) Reset() {
	*x = EncounterYearStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterYearStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterYearStatsResponse) ProtoMessage() {}

func (x *EncounterYearStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ms_encounters_ms_encounters_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterYearStatsResponse.ProtoReflect.Descriptor instead.
func (*EncounterYearStatsResponse) Descriptor() ([]byte, []int) {
	return file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP(), []int{17}
}

func (x *EncounterYearStatsResponse) GetEncounterYearStats() *EncounterYearStats {
	if x != nil {
		return x.EncounterYearStats
	}
	return nil
}

var File_proto_ms_encounters_ms_encounters_proto protoreflect.FileDescriptor

var file_proto_ms_encounters_ms_encounters_proto_rawDesc = []byte{
	0x0a, 0x27, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x73, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x73, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x73, 0x5f, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x05, 0x0a, 0x09, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x58, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x58, 0x70, 0x12, 0x36, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x58, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x33, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x43, 0x49,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x49, 0x53, 0x43, 0x10, 0x02, 0x22, 0x5d, 0x0a, 0x17,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x22, 0x95, 0x03, 0x0a, 0x13,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a,
	0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x58, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x58, 0x70, 0x12,
	0x54, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x54, 0x0a,
	0x19, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x22, 0x5a, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x92, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x59, 0x65, 0x61,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x16, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x13, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x4e, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x4e, 0x6f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x0a, 0x09, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x42, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x59, 0x65,
	0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x59, 0x65, 0x61, 0x72, 0x22, 0x4a, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x22, 0x4b, 0x0a, 0x11, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x73, 0x5f, 0x65,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x5f,
	0x0a, 0x15, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x73, 0x5f,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22,
	0x54, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4e, 0x0a, 0x12, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x22, 0x73, 0x0a, 0x1b, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x1c, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x5f, 0x0a, 0x16, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x0e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x22, 0x6f, 0x0a, 0x1a, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x59, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x12, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x59, 0x65,
	0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x12, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x2a, 0x36, 0x0a, 0x0f, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02, 0x32, 0xe4, 0x0e, 0x0a,
	0x0a, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x63, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x1e, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4e, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x5e, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x49, 0x64, 0x7d,
	0x12, 0x66, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x73, 0x5f,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x73,
	0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x3a, 0x01, 0x2a, 0x1a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x49, 0x64, 0x7d, 0x12, 0x60, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4e,
	0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x7b, 0x49, 0x64, 0x7d, 0x12, 0x82, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x67, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18,
	0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x2f, 0x62, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x90, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x6d, 0x73, 0x5f,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4e, 0x6f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x73, 0x5f,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6f, 0x0a,
	0x07, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x73, 0x5f, 0x65,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x1a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x6f,
	0x0a, 0x07, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x73, 0x5f, 0x65,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x73, 0x5f,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x1a, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x80, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x94, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x73,
	0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a,
	0x01, 0x2a, 0x1a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74,
	0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x96, 0x01, 0x0a, 0x0f, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x24, 0x2e,
	0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x1a, 0x26, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x2f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x94, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c,
	0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d,
	0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x6d, 0x73, 0x5f, 0x65,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x6d, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x32, 0x12, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x2f,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2f, 0x79, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x17, 0x5a, 0x15, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d,
	0x73, 0x2d, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_ms_encounters_ms_encounters_proto_rawDescOnce sync.Once
	file_proto_ms_encounters_ms_encounters_proto_rawDescData = file_proto_ms_encounters_ms_encounters_proto_rawDesc
)

func file_proto_ms_encounters_ms_encounters_proto_rawDescGZIP() []byte {
	file_proto_ms_encounters_ms_encounters_proto_rawDescOnce.Do(func() {
		file_proto_ms_encounters_ms_encounters_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_ms_encounters_ms_encounters_proto_rawDescData)
	})
	return file_proto_ms_encounters_ms_encounters_proto_rawDescData
}

var file_proto_ms_encounters_ms_encounters_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_ms_encounters_ms_encounters_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_proto_ms_encounters_ms_encounters_proto_goTypes = []interface{}{
	(EncounterStatus)(0),                               // 0: ms_encounters.EncounterStatus
	(Encounter_EncounterType)(0),                       // 1: ms_encounters.Encounter.EncounterType
	(Encounter_EncounterApprovalStatus)(0),             // 2: ms_encounters.Encounter.EncounterApprovalStatus
	(EncounterCompletion_EncounterCompletionStatus)(0), // 3: ms_encounters.EncounterCompletion.EncounterCompletionStatus
	(*Encounter)(nil),                                  // 4: ms_encounters.Encounter
	(*EncounterCompletion)(nil),                        // 5: ms_encounters.EncounterCompletion
	(*EncounterStats)(nil),                             // 6: ms_encounters.EncounterStats
	(*EncounterYearStats)(nil),                         // 7: ms_encounters.EncounterYearStats
	(*NoParamsRequest)(nil),                            // 8: ms_encounters.NoParamsRequest
	(*NoParamsResponse)(nil),                           // 9: ms_encounters.NoParamsResponse
	(*IdRequest)(nil),                                  // 10: ms_encounters.IdRequest
	(*UserIdRequest)(nil),                              // 11: ms_encounters.UserIdRequest
	(*UserIdAndYearRequest)(nil),                       // 12: ms_encounters.UserIdAndYearRequest
	(*EncounterRequest)(nil),                           // 13: ms_encounters.EncounterRequest
	(*EncounterResponse)(nil),                          // 14: ms_encounters.EncounterResponse
	(*IdAndEncounterRequest)(nil),                      // 15: ms_encounters.IdAndEncounterRequest
	(*GetApprovedByStatusRequest)(nil),                 // 16: ms_encounters.GetApprovedByStatusRequest
	(*EncountersResponse)(nil),                         // 17: ms_encounters.EncountersResponse
	(*EncounterCompletionResponse)(nil),                // 18: ms_encounters.EncounterCompletionResponse
	(*EncounterCompletionsResponse)(nil),               // 19: ms_encounters.EncounterCompletionsResponse
	(*EncounterStatsResponse)(nil),                     // 20: ms_encounters.EncounterStatsResponse
	(*EncounterYearStatsResponse)(nil),                 // 21: ms_encounters.EncounterYearStatsResponse
	(*timestamppb.Timestamp)(nil),                      // 22: google.protobuf.Timestamp
}
var file_proto_ms_encounters_ms_encounters_proto_depIdxs = []int32{
	0,  // 0: ms_encounters.Encounter.Status:type_name -> ms_encounters.EncounterStatus
	1,  // 1: ms_encounters.Encounter.Type:type_name -> ms_encounters.Encounter.EncounterType
	2,  // 2: ms_encounters.Encounter.approvalStatus:type_name -> ms_encounters.Encounter.EncounterApprovalStatus
	22, // 3: ms_encounters.EncounterCompletion.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	3,  // 4: ms_encounters.EncounterCompletion.Status:type_name -> ms_encounters.EncounterCompletion.EncounterCompletionStatus
	4,  // 5: ms_encounters.EncounterCompletion.Encounter:type_name -> ms_encounters.Encounter
	4,  // 6: ms_encounters.EncounterRequest.Encounter:type_name -> ms_encounters.Encounter
	4,  // 7: ms_encounters.EncounterResponse.Encounter:type_name -> ms_encounters.Encounter
	4,  // 8: ms_encounters.IdAndEncounterRequest.Encounter:type_name -> ms_encounters.Encounter
	0,  // 9: ms_encounters.GetApprovedByStatusRequest.Status:type_name -> ms_encounters.EncounterStatus
	4,  // 10: ms_encounters.EncountersResponse.Encounters:type_name -> ms_encounters.Encounter
	5,  // 11: ms_encounters.EncounterCompletionResponse.EncounterCompletion:type_name -> ms_encounters.EncounterCompletion
	5,  // 12: ms_encounters.EncounterCompletionsResponse.EncounterCompletions:type_name -> ms_encounters.EncounterCompletion
	6,  // 13: ms_encounters.EncounterStatsResponse.EncounterStats:type_name -> ms_encounters.EncounterStats
	7,  // 14: ms_encounters.EncounterYearStatsResponse.EncounterYearStats:type_name -> ms_encounters.EncounterYearStats
	8,  // 15: ms_encounters.Encounters.GetAll:input_type -> ms_encounters.NoParamsRequest
	10, // 16: ms_encounters.Encounters.Get:input_type -> ms_encounters.IdRequest
	13, // 17: ms_encounters.Encounters.Create:input_type -> ms_encounters.EncounterRequest
	15, // 18: ms_encounters.Encounters.Update:input_type -> ms_encounters.IdAndEncounterRequest
	10, // 19: ms_encounters.Encounters.Delete:input_type -> ms_encounters.IdRequest
	16, // 20: ms_encounters.Encounters.GetApprovedByStatus:input_type -> ms_encounters.GetApprovedByStatusRequest
	10, // 21: ms_encounters.Encounters.GetByUser:input_type -> ms_encounters.IdRequest
	8,  // 22: ms_encounters.Encounters.GetTouristCreatedEncounters:input_type -> ms_encounters.NoParamsRequest
	13, // 23: ms_encounters.Encounters.Approve:input_type -> ms_encounters.EncounterRequest
	13, // 24: ms_encounters.Encounters.Decline:input_type -> ms_encounters.EncounterRequest
	11, // 25: ms_encounters.Encounters.GetCompletionByUser:input_type -> ms_encounters.UserIdRequest
	15, // 26: ms_encounters.Encounters.StartEncounter:input_type -> ms_encounters.IdAndEncounterRequest
	15, // 27: ms_encounters.Encounters.FinishEncounter:input_type -> ms_encounters.IdAndEncounterRequest
	11, // 28: ms_encounters.Encounters.GetEncounterStatsByUser:input_type -> ms_encounters.UserIdRequest
	12, // 29: ms_encounters.Encounters.GetEncounterYearStatsByUser:input_type -> ms_encounters.UserIdAndYearRequest
	17, // 30: ms_encounters.Encounters.GetAll:output_type -> ms_encounters.EncountersResponse
	14, // 31: ms_encounters.Encounters.Get:output_type -> ms_encounters.EncounterResponse
	14, // 32: ms_encounters.Encounters.Create:output_type -> ms_encounters.EncounterResponse
	14, // 33: ms_encounters.Encounters.Update:output_type -> ms_encounters.EncounterResponse
	9,  // 34: ms_encounters.Encounters.Delete:output_type -> ms_encounters.NoParamsResponse
	17, // 35: ms_encounters.Encounters.GetApprovedByStatus:output_type -> ms_encounters.EncountersResponse
	17, // 36: ms_encounters.Encounters.GetByUser:output_type -> ms_encounters.EncountersResponse
	17, // 37: ms_encounters.Encounters.GetTouristCreatedEncounters:output_type -> ms_encounters.EncountersResponse
	14, // 38: ms_encounters.Encounters.Approve:output_type -> ms_encounters.EncounterResponse
	14, // 39: ms_encounters.Encounters.Decline:output_type -> ms_encounters.EncounterResponse
	19, // 40: ms_encounters.Encounters.GetCompletionByUser:output_type -> ms_encounters.EncounterCompletionsResponse
	18, // 41: ms_encounters.Encounters.StartEncounter:output_type -> ms_encounters.EncounterCompletionResponse
	18, // 42: ms_encounters.Encounters.FinishEncounter:output_type -> ms_encounters.EncounterCompletionResponse
	20, // 43: ms_encounters.Encounters.GetEncounterStatsByUser:output_type -> ms_encounters.EncounterStatsResponse
	21, // 44: ms_encounters.Encounters.GetEncounterYearStatsByUser:output_type -> ms_encounters.EncounterYearStatsResponse
	30, // [30:45] is the sub-list for method output_type
	15, // [15:30] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_proto_ms_encounters_ms_encounters_proto_init() }
func file_proto_ms_encounters_ms_encounters_proto_init() {
	if File_proto_ms_encounters_ms_encounters_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Encounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterCompletion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterYearStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIdAndYearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdAndEncounterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApprovedByStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncountersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterCompletionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterCompletionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ms_encounters_ms_encounters_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterYearStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_ms_encounters_ms_encounters_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_ms_encounters_ms_encounters_proto_goTypes,
		DependencyIndexes: file_proto_ms_encounters_ms_encounters_proto_depIdxs,
		EnumInfos:         file_proto_ms_encounters_ms_encounters_proto_enumTypes,
		MessageInfos:      file_proto_ms_encounters_ms_encounters_proto_msgTypes,
	}.Build()
	File_proto_ms_encounters_ms_encounters_proto = out.File
	file_proto_ms_encounters_ms_encounters_proto_rawDesc = nil
	file_proto_ms_encounters_ms_encounters_proto_goTypes = nil
	file_proto_ms_encounters_ms_encounters_proto_depIdxs = nil
}
