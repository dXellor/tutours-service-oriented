syntax = "proto3";

package ms_encounters;

option go_package = "./proto/ms-encounters";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

service Encounters {
  rpc GetAll(NoParamsRequest) returns(EncountersResponse) {
    option (google.api.http) = {
      get:"/api/encounter"
    };
  }
  rpc Get(IdRequest) returns(EncounterResponse) {
    option (google.api.http) = {
      get:"/api/encounter/{Id}"
    };
  }
  rpc Create(EncounterRequest) returns(EncounterResponse) {
    option (google.api.http) = {
      post:"/api/encounter"
      body:"*"
    };
  }
  rpc Update(IdAndEncounterRequest) returns(EncounterResponse) {
    option (google.api.http) = {
      put:"/api/encounter/{Id}"
      body:"*"
    };
  }
  rpc Delete(IdRequest) returns(NoParamsResponse) {
    option (google.api.http) = {
      delete:"/api/encounter/{Id}"
    };
  }
  rpc GetApprovedByStatus(GetApprovedByStatusRequest) returns(EncountersResponse) {
    option (google.api.http) = {
      get:"/api/encounter/status"
    };
  }
  rpc GetByUser(IdRequest) returns(EncountersResponse) {
    option (google.api.http) = {
      get:"/api/encounter/byUser"
    };
  }
  rpc GetTouristCreatedEncounters(NoParamsRequest) returns(EncountersResponse) {
    option (google.api.http) = {
      get:"/api/encounter/touristCreatedEncouters"
    };
  }
  rpc Approve(EncounterRequest) returns(EncounterResponse) {
    option (google.api.http) = {
      put:"/api/encounter/approve"
      body:"*"
    };
  }
  rpc Decline(EncounterRequest) returns(EncounterResponse) {
    option (google.api.http) = {
      put:"/api/encounter/decline"
      body:"*"
    };
  }
  rpc GetCompletionByUser(UserIdRequest) returns(EncounterCompletionsResponse) {
    option (google.api.http) = {
      get: "/api/tourist/encounter"
    };
  }
  rpc StartEncounter(IdAndEncounterRequest) returns(EncounterCompletionResponse) {
    option (google.api.http) = {
      put: "/api/tourist/encounter/startEncounter"
      body: "*"
    };
  }
  rpc FinishEncounter(IdAndEncounterRequest) returns(EncounterCompletionResponse) {
    option (google.api.http) = {
      put: "/api/tourist/encounter/finishEncounter"
      body: "*"
    };
  }
  rpc GetEncounterStatsByUser(UserIdRequest) returns(EncounterStatsResponse) {
    option (google.api.http) = {
      get:"/api/tourist/encounterStatistics/completions"
    };
  }
  rpc GetEncounterYearStatsByUser(UserIdAndYearRequest) returns(EncounterYearStatsResponse) {
    option (google.api.http) = {
      get:"/api/tourist/encounterStatistics/yearCompletions"
    };
  }
}

enum EncounterStatus {
  ACTIVE = 0;
  DRAFT = 1;
  ARCHIVED = 2;
} 

message Encounter {
  int32 Id = 1;
  int32 UserId = 2;
  string Name = 3;
  string Description = 4;
  float Latitude = 5;
  float Longitude = 6;
  int32 Xp = 7;
  EncounterStatus Status = 8;
  enum EncounterType {
      SOCIAL = 0;
      LOCATION = 1;
      MISC = 2;
  } 
  EncounterType Type = 9;
  float Range = 10;
  string Image = 11;
  int32 PeopleCount = 12;
  enum EncounterApprovalStatus {
      PENDING = 0;
      SYSTEM_APPROVED = 1;
      ADMIN_APPROVED = 2;
      DECLINED = 3;
  } 
  EncounterApprovalStatus approvalStatus = 13;
  float ImageLatitude = 14;
  float ImageLongitude = 15;
}

message EncounterCompletion {
  int32 Id = 1;
  int32 UserId = 2;
  int32 EncounterId = 3;
  google.protobuf.Timestamp LastUpdatedAt = 4;
  int32 Xp = 5;
  enum EncounterCompletionStatus {
    	STARTED = 0;
      FAILED = 1;
      COMPLETED = 2;
      PROGRESSING = 3;
  }
  EncounterCompletionStatus Status = 6;
  Encounter Encounter = 7;
}

message EncounterStats {
  int32 CompletedCount = 1;
  int32 FailedCount = 2;
}

message EncounterYearStats {
  int32 Year = 1;
  repeated int32 CompletedCountByMonths = 2; // idk valjda
  repeated int32 FailedCountByMonths = 3; // idk valjda
}

message NoParamsRequest{}
message NoParamsResponse{}

message IdRequest {
  int64 Id = 1;
}

message UserIdRequest {
  int64 UserId = 1;
}

message UserIdAndYearRequest {
  int64 UserId = 1;
  int64 Year = 2;
}

message EncounterRequest {
  Encounter Encounter = 2;
}

message EncounterResponse {
  Encounter Encounter = 2;
}

message IdAndEncounterRequest {
  int64 Id = 1;
  Encounter Encounter = 2;
}

message GetApprovedByStatusRequest {
  EncounterStatus Status = 1;
}

message EncountersResponse {
  repeated Encounter Encounters = 1;
}

message EncounterCompletionResponse {
  EncounterCompletion EncounterCompletion = 1;
}

message EncounterCompletionsResponse {
  repeated EncounterCompletion EncounterCompletions = 1;
}

message EncounterStatsResponse {
  EncounterStats EncounterStats = 1;
}

message EncounterYearStatsResponse {
  EncounterYearStats EncounterYearStats = 1;
}