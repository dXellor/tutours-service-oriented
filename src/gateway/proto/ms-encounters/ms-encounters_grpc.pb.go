// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/ms-encounters/ms-encounters.proto

package ms_encounters

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Encounters_GetAll_FullMethodName                      = "/ms_encounters.Encounters/GetAll"
	Encounters_Get_FullMethodName                         = "/ms_encounters.Encounters/Get"
	Encounters_Create_FullMethodName                      = "/ms_encounters.Encounters/Create"
	Encounters_Update_FullMethodName                      = "/ms_encounters.Encounters/Update"
	Encounters_Delete_FullMethodName                      = "/ms_encounters.Encounters/Delete"
	Encounters_GetApprovedByStatus_FullMethodName         = "/ms_encounters.Encounters/GetApprovedByStatus"
	Encounters_GetByUser_FullMethodName                   = "/ms_encounters.Encounters/GetByUser"
	Encounters_GetTouristCreatedEncounters_FullMethodName = "/ms_encounters.Encounters/GetTouristCreatedEncounters"
	Encounters_Approve_FullMethodName                     = "/ms_encounters.Encounters/Approve"
	Encounters_Decline_FullMethodName                     = "/ms_encounters.Encounters/Decline"
	Encounters_GetCompletionByUser_FullMethodName         = "/ms_encounters.Encounters/GetCompletionByUser"
	Encounters_StartEncounter_FullMethodName              = "/ms_encounters.Encounters/StartEncounter"
	Encounters_FinishEncounter_FullMethodName             = "/ms_encounters.Encounters/FinishEncounter"
	Encounters_GetEncounterStatsByUser_FullMethodName     = "/ms_encounters.Encounters/GetEncounterStatsByUser"
	Encounters_GetEncounterYearStatsByUser_FullMethodName = "/ms_encounters.Encounters/GetEncounterYearStatsByUser"
)

// EncountersClient is the client API for Encounters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncountersClient interface {
	GetAll(ctx context.Context, in *NoParamsRequest, opts ...grpc.CallOption) (*EncountersResponse, error)
	Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*EncounterResponse, error)
	Create(ctx context.Context, in *EncounterRequest, opts ...grpc.CallOption) (*EncounterResponse, error)
	Update(ctx context.Context, in *IdAndEncounterRequest, opts ...grpc.CallOption) (*EncounterResponse, error)
	Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*NoParamsResponse, error)
	GetApprovedByStatus(ctx context.Context, in *GetApprovedByStatusRequest, opts ...grpc.CallOption) (*EncountersResponse, error)
	GetByUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*EncountersResponse, error)
	GetTouristCreatedEncounters(ctx context.Context, in *NoParamsRequest, opts ...grpc.CallOption) (*EncountersResponse, error)
	Approve(ctx context.Context, in *EncounterRequest, opts ...grpc.CallOption) (*EncounterResponse, error)
	Decline(ctx context.Context, in *EncounterRequest, opts ...grpc.CallOption) (*EncounterResponse, error)
	GetCompletionByUser(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*EncounterCompletionsResponse, error)
	StartEncounter(ctx context.Context, in *IdAndEncounterRequest, opts ...grpc.CallOption) (*EncounterCompletionResponse, error)
	FinishEncounter(ctx context.Context, in *IdAndEncounterRequest, opts ...grpc.CallOption) (*EncounterCompletionResponse, error)
	GetEncounterStatsByUser(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*EncounterStatsResponse, error)
	GetEncounterYearStatsByUser(ctx context.Context, in *UserIdAndYearRequest, opts ...grpc.CallOption) (*EncounterYearStatsResponse, error)
}

type encountersClient struct {
	cc grpc.ClientConnInterface
}

func NewEncountersClient(cc grpc.ClientConnInterface) EncountersClient {
	return &encountersClient{cc}
}

func (c *encountersClient) GetAll(ctx context.Context, in *NoParamsRequest, opts ...grpc.CallOption) (*EncountersResponse, error) {
	out := new(EncountersResponse)
	err := c.cc.Invoke(ctx, Encounters_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encountersClient) Get(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*EncounterResponse, error) {
	out := new(EncounterResponse)
	err := c.cc.Invoke(ctx, Encounters_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encountersClient) Create(ctx context.Context, in *EncounterRequest, opts ...grpc.CallOption) (*EncounterResponse, error) {
	out := new(EncounterResponse)
	err := c.cc.Invoke(ctx, Encounters_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encountersClient) Update(ctx context.Context, in *IdAndEncounterRequest, opts ...grpc.CallOption) (*EncounterResponse, error) {
	out := new(EncounterResponse)
	err := c.cc.Invoke(ctx, Encounters_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encountersClient) Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*NoParamsResponse, error) {
	out := new(NoParamsResponse)
	err := c.cc.Invoke(ctx, Encounters_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encountersClient) GetApprovedByStatus(ctx context.Context, in *GetApprovedByStatusRequest, opts ...grpc.CallOption) (*EncountersResponse, error) {
	out := new(EncountersResponse)
	err := c.cc.Invoke(ctx, Encounters_GetApprovedByStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encountersClient) GetByUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*EncountersResponse, error) {
	out := new(EncountersResponse)
	err := c.cc.Invoke(ctx, Encounters_GetByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encountersClient) GetTouristCreatedEncounters(ctx context.Context, in *NoParamsRequest, opts ...grpc.CallOption) (*EncountersResponse, error) {
	out := new(EncountersResponse)
	err := c.cc.Invoke(ctx, Encounters_GetTouristCreatedEncounters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encountersClient) Approve(ctx context.Context, in *EncounterRequest, opts ...grpc.CallOption) (*EncounterResponse, error) {
	out := new(EncounterResponse)
	err := c.cc.Invoke(ctx, Encounters_Approve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encountersClient) Decline(ctx context.Context, in *EncounterRequest, opts ...grpc.CallOption) (*EncounterResponse, error) {
	out := new(EncounterResponse)
	err := c.cc.Invoke(ctx, Encounters_Decline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encountersClient) GetCompletionByUser(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*EncounterCompletionsResponse, error) {
	out := new(EncounterCompletionsResponse)
	err := c.cc.Invoke(ctx, Encounters_GetCompletionByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encountersClient) StartEncounter(ctx context.Context, in *IdAndEncounterRequest, opts ...grpc.CallOption) (*EncounterCompletionResponse, error) {
	out := new(EncounterCompletionResponse)
	err := c.cc.Invoke(ctx, Encounters_StartEncounter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encountersClient) FinishEncounter(ctx context.Context, in *IdAndEncounterRequest, opts ...grpc.CallOption) (*EncounterCompletionResponse, error) {
	out := new(EncounterCompletionResponse)
	err := c.cc.Invoke(ctx, Encounters_FinishEncounter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encountersClient) GetEncounterStatsByUser(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*EncounterStatsResponse, error) {
	out := new(EncounterStatsResponse)
	err := c.cc.Invoke(ctx, Encounters_GetEncounterStatsByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encountersClient) GetEncounterYearStatsByUser(ctx context.Context, in *UserIdAndYearRequest, opts ...grpc.CallOption) (*EncounterYearStatsResponse, error) {
	out := new(EncounterYearStatsResponse)
	err := c.cc.Invoke(ctx, Encounters_GetEncounterYearStatsByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncountersServer is the server API for Encounters service.
// All implementations should embed UnimplementedEncountersServer
// for forward compatibility
type EncountersServer interface {
	GetAll(context.Context, *NoParamsRequest) (*EncountersResponse, error)
	Get(context.Context, *IdRequest) (*EncounterResponse, error)
	Create(context.Context, *EncounterRequest) (*EncounterResponse, error)
	Update(context.Context, *IdAndEncounterRequest) (*EncounterResponse, error)
	Delete(context.Context, *IdRequest) (*NoParamsResponse, error)
	GetApprovedByStatus(context.Context, *GetApprovedByStatusRequest) (*EncountersResponse, error)
	GetByUser(context.Context, *IdRequest) (*EncountersResponse, error)
	GetTouristCreatedEncounters(context.Context, *NoParamsRequest) (*EncountersResponse, error)
	Approve(context.Context, *EncounterRequest) (*EncounterResponse, error)
	Decline(context.Context, *EncounterRequest) (*EncounterResponse, error)
	GetCompletionByUser(context.Context, *UserIdRequest) (*EncounterCompletionsResponse, error)
	StartEncounter(context.Context, *IdAndEncounterRequest) (*EncounterCompletionResponse, error)
	FinishEncounter(context.Context, *IdAndEncounterRequest) (*EncounterCompletionResponse, error)
	GetEncounterStatsByUser(context.Context, *UserIdRequest) (*EncounterStatsResponse, error)
	GetEncounterYearStatsByUser(context.Context, *UserIdAndYearRequest) (*EncounterYearStatsResponse, error)
}

// UnimplementedEncountersServer should be embedded to have forward compatible implementations.
type UnimplementedEncountersServer struct {
}

func (UnimplementedEncountersServer) GetAll(context.Context, *NoParamsRequest) (*EncountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedEncountersServer) Get(context.Context, *IdRequest) (*EncounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEncountersServer) Create(context.Context, *EncounterRequest) (*EncounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEncountersServer) Update(context.Context, *IdAndEncounterRequest) (*EncounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEncountersServer) Delete(context.Context, *IdRequest) (*NoParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEncountersServer) GetApprovedByStatus(context.Context, *GetApprovedByStatusRequest) (*EncountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApprovedByStatus not implemented")
}
func (UnimplementedEncountersServer) GetByUser(context.Context, *IdRequest) (*EncountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUser not implemented")
}
func (UnimplementedEncountersServer) GetTouristCreatedEncounters(context.Context, *NoParamsRequest) (*EncountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTouristCreatedEncounters not implemented")
}
func (UnimplementedEncountersServer) Approve(context.Context, *EncounterRequest) (*EncounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (UnimplementedEncountersServer) Decline(context.Context, *EncounterRequest) (*EncounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decline not implemented")
}
func (UnimplementedEncountersServer) GetCompletionByUser(context.Context, *UserIdRequest) (*EncounterCompletionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompletionByUser not implemented")
}
func (UnimplementedEncountersServer) StartEncounter(context.Context, *IdAndEncounterRequest) (*EncounterCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartEncounter not implemented")
}
func (UnimplementedEncountersServer) FinishEncounter(context.Context, *IdAndEncounterRequest) (*EncounterCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishEncounter not implemented")
}
func (UnimplementedEncountersServer) GetEncounterStatsByUser(context.Context, *UserIdRequest) (*EncounterStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEncounterStatsByUser not implemented")
}
func (UnimplementedEncountersServer) GetEncounterYearStatsByUser(context.Context, *UserIdAndYearRequest) (*EncounterYearStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEncounterYearStatsByUser not implemented")
}

// UnsafeEncountersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncountersServer will
// result in compilation errors.
type UnsafeEncountersServer interface {
	mustEmbedUnimplementedEncountersServer()
}

func RegisterEncountersServer(s grpc.ServiceRegistrar, srv EncountersServer) {
	s.RegisterService(&Encounters_ServiceDesc, srv)
}

func _Encounters_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encounters_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServer).GetAll(ctx, req.(*NoParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounters_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encounters_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServer).Get(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounters_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encounters_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServer).Create(ctx, req.(*EncounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounters_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndEncounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encounters_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServer).Update(ctx, req.(*IdAndEncounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounters_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encounters_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServer).Delete(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounters_GetApprovedByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApprovedByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServer).GetApprovedByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encounters_GetApprovedByStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServer).GetApprovedByStatus(ctx, req.(*GetApprovedByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounters_GetByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServer).GetByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encounters_GetByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServer).GetByUser(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounters_GetTouristCreatedEncounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServer).GetTouristCreatedEncounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encounters_GetTouristCreatedEncounters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServer).GetTouristCreatedEncounters(ctx, req.(*NoParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounters_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encounters_Approve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServer).Approve(ctx, req.(*EncounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounters_Decline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServer).Decline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encounters_Decline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServer).Decline(ctx, req.(*EncounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounters_GetCompletionByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServer).GetCompletionByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encounters_GetCompletionByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServer).GetCompletionByUser(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounters_StartEncounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndEncounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServer).StartEncounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encounters_StartEncounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServer).StartEncounter(ctx, req.(*IdAndEncounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounters_FinishEncounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdAndEncounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServer).FinishEncounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encounters_FinishEncounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServer).FinishEncounter(ctx, req.(*IdAndEncounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounters_GetEncounterStatsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServer).GetEncounterStatsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encounters_GetEncounterStatsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServer).GetEncounterStatsByUser(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Encounters_GetEncounterYearStatsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdAndYearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncountersServer).GetEncounterYearStatsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Encounters_GetEncounterYearStatsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncountersServer).GetEncounterYearStatsByUser(ctx, req.(*UserIdAndYearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Encounters_ServiceDesc is the grpc.ServiceDesc for Encounters service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Encounters_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ms_encounters.Encounters",
	HandlerType: (*EncountersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _Encounters_GetAll_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Encounters_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Encounters_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Encounters_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Encounters_Delete_Handler,
		},
		{
			MethodName: "GetApprovedByStatus",
			Handler:    _Encounters_GetApprovedByStatus_Handler,
		},
		{
			MethodName: "GetByUser",
			Handler:    _Encounters_GetByUser_Handler,
		},
		{
			MethodName: "GetTouristCreatedEncounters",
			Handler:    _Encounters_GetTouristCreatedEncounters_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _Encounters_Approve_Handler,
		},
		{
			MethodName: "Decline",
			Handler:    _Encounters_Decline_Handler,
		},
		{
			MethodName: "GetCompletionByUser",
			Handler:    _Encounters_GetCompletionByUser_Handler,
		},
		{
			MethodName: "StartEncounter",
			Handler:    _Encounters_StartEncounter_Handler,
		},
		{
			MethodName: "FinishEncounter",
			Handler:    _Encounters_FinishEncounter_Handler,
		},
		{
			MethodName: "GetEncounterStatsByUser",
			Handler:    _Encounters_GetEncounterStatsByUser_Handler,
		},
		{
			MethodName: "GetEncounterYearStatsByUser",
			Handler:    _Encounters_GetEncounterYearStatsByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ms-encounters/ms-encounters.proto",
}
