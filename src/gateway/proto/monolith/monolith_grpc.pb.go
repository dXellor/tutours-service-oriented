// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/monolith/monolith.proto

package monolith

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Monolith_Login_FullMethodName = "/monolith.Monolith/Login"
)

// MonolithClient is the client API for Monolith service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonolithClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type monolithClient struct {
	cc grpc.ClientConnInterface
}

func NewMonolithClient(cc grpc.ClientConnInterface) MonolithClient {
	return &monolithClient{cc}
}

func (c *monolithClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Monolith_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonolithServer is the server API for Monolith service.
// All implementations should embed UnimplementedMonolithServer
// for forward compatibility
type MonolithServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
}

// UnimplementedMonolithServer should be embedded to have forward compatible implementations.
type UnimplementedMonolithServer struct {
}

func (UnimplementedMonolithServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}

// UnsafeMonolithServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonolithServer will
// result in compilation errors.
type UnsafeMonolithServer interface {
	mustEmbedUnimplementedMonolithServer()
}

func RegisterMonolithServer(s grpc.ServiceRegistrar, srv MonolithServer) {
	s.RegisterService(&Monolith_ServiceDesc, srv)
}

func _Monolith_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonolithServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Monolith_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonolithServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Monolith_ServiceDesc is the grpc.ServiceDesc for Monolith service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Monolith_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monolith.Monolith",
	HandlerType: (*MonolithServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Monolith_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/monolith/monolith.proto",
}
